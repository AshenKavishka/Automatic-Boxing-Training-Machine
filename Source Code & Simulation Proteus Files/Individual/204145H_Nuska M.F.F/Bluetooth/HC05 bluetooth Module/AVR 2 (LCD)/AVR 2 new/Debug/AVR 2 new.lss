
AVR 2 new.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000410  000004a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080008c  0080008c  000004d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000101e  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a62  00000000  00000000  00001652  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095c  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00002a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000540  00000000  00000000  00002bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000651  00000000  00000000  00003114  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003765  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 93 01 	call	0x326	; 0x326 <main>
  8a:	0c 94 06 02 	jmp	0x40c	; 0x40c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <blueTooth>:
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	27 97       	sbiw	r28, 0x07	; 7
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
  aa:	60 e8       	ldi	r22, 0x80	; 128
  ac:	75 e2       	ldi	r23, 0x25	; 37
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 b2 01 	call	0x364	; 0x364 <USART_Init>
  b6:	40 e7       	ldi	r20, 0x70	; 112
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_String_xy>
  c6:	00 e0       	ldi	r16, 0x00	; 0
  c8:	10 e0       	ldi	r17, 0x00	; 0
  ca:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <USART_RxFloat>
  ce:	e1 e0       	ldi	r30, 0x01	; 1
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	ec 0f       	add	r30, r28
  d4:	fd 1f       	adc	r31, r29
  d6:	e0 0f       	add	r30, r16
  d8:	f1 1f       	adc	r31, r17
  da:	80 83       	st	Z, r24
  dc:	0f 5f       	subi	r16, 0xFF	; 255
  de:	1f 4f       	sbci	r17, 0xFF	; 255
  e0:	81 11       	cpse	r24, r1
  e2:	f3 cf       	rjmp	.-26     	; 0xca <blueTooth+0x38>
  e4:	ae 01       	movw	r20, r28
  e6:	4f 5f       	subi	r20, 0xFF	; 255
  e8:	5f 4f       	sbci	r21, 0xFF	; 255
  ea:	6a e0       	ldi	r22, 0x0A	; 10
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_String_xy>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	81 ee       	ldi	r24, 0xE1	; 225
  fa:	94 e0       	ldi	r25, 0x04	; 4
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <blueTooth+0x6a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <blueTooth+0x74>
 106:	00 00       	nop
 108:	27 96       	adiw	r28, 0x07	; 7
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <keySearch>:
 11e:	80 ef       	ldi	r24, 0xF0	; 240
 120:	84 bb       	out	0x14, r24	; 20
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	85 bb       	out	0x15, r24	; 21
 126:	85 b3       	in	r24, 0x15	; 21
 128:	8f 70       	andi	r24, 0x0F	; 15
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	83 b3       	in	r24, 0x13	; 19
 12e:	8f 70       	andi	r24, 0x0F	; 15
 130:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
 134:	8f 30       	cpi	r24, 0x0F	; 15
 136:	b9 f7       	brne	.-18     	; 0x126 <keySearch+0x8>
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	89 ef       	ldi	r24, 0xF9	; 249
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <keySearch+0x20>
 146:	00 c0       	rjmp	.+0      	; 0x148 <keySearch+0x2a>
 148:	00 00       	nop
 14a:	83 b3       	in	r24, 0x13	; 19
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
 152:	8f 30       	cpi	r24, 0x0F	; 15
 154:	89 f3       	breq	.-30     	; 0x138 <keySearch+0x1a>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	89 ef       	ldi	r24, 0xF9	; 249
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <keySearch+0x3e>
 164:	00 c0       	rjmp	.+0      	; 0x166 <keySearch+0x48>
 166:	00 00       	nop
 168:	83 b3       	in	r24, 0x13	; 19
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
 170:	8f 30       	cpi	r24, 0x0F	; 15
 172:	11 f3       	breq	.-60     	; 0x138 <keySearch+0x1a>
 174:	8f ee       	ldi	r24, 0xEF	; 239
 176:	85 bb       	out	0x15, r24	; 21
 178:	83 b3       	in	r24, 0x13	; 19
 17a:	8f 70       	andi	r24, 0x0F	; 15
 17c:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
 180:	8f 30       	cpi	r24, 0x0F	; 15
 182:	19 f0       	breq	.+6      	; 0x18a <keySearch+0x6c>
 184:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <rowloc>
 188:	24 c0       	rjmp	.+72     	; 0x1d2 <keySearch+0xb4>
 18a:	8f ed       	ldi	r24, 0xDF	; 223
 18c:	85 bb       	out	0x15, r24	; 21
 18e:	83 b3       	in	r24, 0x13	; 19
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
 196:	8f 30       	cpi	r24, 0x0F	; 15
 198:	21 f0       	breq	.+8      	; 0x1a2 <keySearch+0x84>
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <rowloc>
 1a0:	18 c0       	rjmp	.+48     	; 0x1d2 <keySearch+0xb4>
 1a2:	8f eb       	ldi	r24, 0xBF	; 191
 1a4:	85 bb       	out	0x15, r24	; 21
 1a6:	83 b3       	in	r24, 0x13	; 19
 1a8:	8f 70       	andi	r24, 0x0F	; 15
 1aa:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
 1ae:	8f 30       	cpi	r24, 0x0F	; 15
 1b0:	21 f0       	breq	.+8      	; 0x1ba <keySearch+0x9c>
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <rowloc>
 1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <keySearch+0xb4>
 1ba:	8f e7       	ldi	r24, 0x7F	; 127
 1bc:	85 bb       	out	0x15, r24	; 21
 1be:	83 b3       	in	r24, 0x13	; 19
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
 1c6:	8f 30       	cpi	r24, 0x0F	; 15
 1c8:	09 f4       	brne	.+2      	; 0x1cc <keySearch+0xae>
 1ca:	a9 cf       	rjmp	.-174    	; 0x11e <keySearch>
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <rowloc>
 1d2:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
 1d6:	8e 30       	cpi	r24, 0x0E	; 14
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <keySearch+0xd2>
 1da:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <rowloc>
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	e0 5a       	subi	r30, 0xA0	; 160
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	80 81       	ld	r24, Z
 1ee:	08 95       	ret
 1f0:	8d 30       	cpi	r24, 0x0D	; 13
 1f2:	59 f4       	brne	.+22     	; 0x20a <keySearch+0xec>
 1f4:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <rowloc>
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e0 5a       	subi	r30, 0xA0	; 160
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	81 81       	ldd	r24, Z+1	; 0x01
 208:	08 95       	ret
 20a:	8b 30       	cpi	r24, 0x0B	; 11
 20c:	59 f4       	brne	.+22     	; 0x224 <keySearch+0x106>
 20e:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <rowloc>
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	e0 5a       	subi	r30, 0xA0	; 160
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	82 81       	ldd	r24, Z+2	; 0x02
 222:	08 95       	ret
 224:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <rowloc>
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	ee 0f       	add	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	e0 5a       	subi	r30, 0xA0	; 160
 234:	ff 4f       	sbci	r31, 0xFF	; 255
 236:	83 81       	ldd	r24, Z+3	; 0x03
 238:	08 95       	ret

0000023a <LCD_Command>:
 23a:	88 bb       	out	0x18, r24	; 24
 23c:	8b b3       	in	r24, 0x1b	; 27
 23e:	8f 79       	andi	r24, 0x9F	; 159
 240:	8b bb       	out	0x1b, r24	; 27
 242:	8b b3       	in	r24, 0x1b	; 27
 244:	80 68       	ori	r24, 0x80	; 128
 246:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	85 e0       	ldi	r24, 0x05	; 5
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_Command+0x10>
 24e:	00 00       	nop
 250:	8b b3       	in	r24, 0x1b	; 27
 252:	8f 77       	andi	r24, 0x7F	; 127
 254:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	8f ed       	ldi	r24, 0xDF	; 223
 258:	9e e2       	ldi	r25, 0x2E	; 46
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCD_Command+0x20>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <LCD_Command+0x26>
 260:	00 00       	nop
 262:	08 95       	ret

00000264 <LCD_Char>:
 264:	88 bb       	out	0x18, r24	; 24
 266:	8b b3       	in	r24, 0x1b	; 27
 268:	8f 7b       	andi	r24, 0xBF	; 191
 26a:	8b bb       	out	0x1b, r24	; 27
 26c:	8b b3       	in	r24, 0x1b	; 27
 26e:	80 6a       	ori	r24, 0xA0	; 160
 270:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	85 e0       	ldi	r24, 0x05	; 5
 274:	8a 95       	dec	r24
 276:	f1 f7       	brne	.-4      	; 0x274 <LCD_Char+0x10>
 278:	00 00       	nop
 27a:	8b b3       	in	r24, 0x1b	; 27
 27c:	8f 77       	andi	r24, 0x7F	; 127
 27e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 280:	8f e9       	ldi	r24, 0x9F	; 159
 282:	9f e0       	ldi	r25, 0x0F	; 15
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_Char+0x20>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_Char+0x26>
 28a:	00 00       	nop
 28c:	08 95       	ret

0000028e <LCD_Init>:
 28e:	8a b3       	in	r24, 0x1a	; 26
 290:	80 6e       	ori	r24, 0xE0	; 224
 292:	8a bb       	out	0x1a, r24	; 26
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	87 bb       	out	0x17, r24	; 23
 298:	2f ef       	ldi	r18, 0xFF	; 255
 29a:	89 ef       	ldi	r24, 0xF9	; 249
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	90 40       	sbci	r25, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <LCD_Init+0x10>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_Init+0x1a>
 2a8:	00 00       	nop
 2aa:	88 e3       	ldi	r24, 0x38	; 56
 2ac:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_Command>
 2b0:	8c e0       	ldi	r24, 0x0C	; 12
 2b2:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_Command>
 2b6:	86 e0       	ldi	r24, 0x06	; 6
 2b8:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_Command>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_Command>
 2c2:	80 e8       	ldi	r24, 0x80	; 128
 2c4:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_Command>
 2c8:	08 95       	ret

000002ca <LCD_String>:
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	8c 01       	movw	r16, r24
 2d4:	c0 e0       	ldi	r28, 0x00	; 0
 2d6:	d0 e0       	ldi	r29, 0x00	; 0
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <LCD_String+0x16>
 2da:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Char>
 2de:	21 96       	adiw	r28, 0x01	; 1
 2e0:	f8 01       	movw	r30, r16
 2e2:	ec 0f       	add	r30, r28
 2e4:	fd 1f       	adc	r31, r29
 2e6:	80 81       	ld	r24, Z
 2e8:	81 11       	cpse	r24, r1
 2ea:	f7 cf       	rjmp	.-18     	; 0x2da <LCD_String+0x10>
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	08 95       	ret

000002f6 <LCD_String_xy>:
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	ea 01       	movw	r28, r20
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	31 f4       	brne	.+12     	; 0x30c <LCD_String_xy+0x16>
 300:	86 2f       	mov	r24, r22
 302:	8f 70       	andi	r24, 0x0F	; 15
 304:	80 68       	ori	r24, 0x80	; 128
 306:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_Command>
 30a:	07 c0       	rjmp	.+14     	; 0x31a <LCD_String_xy+0x24>
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	29 f4       	brne	.+10     	; 0x31a <LCD_String_xy+0x24>
 310:	86 2f       	mov	r24, r22
 312:	8f 70       	andi	r24, 0x0F	; 15
 314:	80 6c       	ori	r24, 0xC0	; 192
 316:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_Command>
 31a:	ce 01       	movw	r24, r28
 31c:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_String>
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <main>:
 326:	60 e8       	ldi	r22, 0x80	; 128
 328:	75 e2       	ldi	r23, 0x25	; 37
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 b2 01 	call	0x364	; 0x364 <USART_Init>
 332:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_Init>
 336:	4b e7       	ldi	r20, 0x7B	; 123
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_String_xy>
 342:	0e 94 8f 00 	call	0x11e	; 0x11e <keySearch>
 346:	c8 2f       	mov	r28, r24
 348:	8f 33       	cpi	r24, 0x3F	; 63
 34a:	d9 f3       	breq	.-10     	; 0x342 <main+0x1c>
 34c:	45 e8       	ldi	r20, 0x85	; 133
 34e:	50 e0       	ldi	r21, 0x00	; 0
 350:	69 e0       	ldi	r22, 0x09	; 9
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_String_xy>
 358:	8c 2f       	mov	r24, r28
 35a:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Char>
 35e:	0e 94 49 00 	call	0x92	; 0x92 <blueTooth>
 362:	fd cf       	rjmp	.-6      	; 0x35e <main+0x38>

00000364 <USART_Init>:
 */ 
#include "USART_RS232_H_file.h"						/* Include USART header file */

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);				/* Enable USART transmitter and receiver */
 364:	2a b1       	in	r18, 0x0a	; 10
 366:	28 61       	ori	r18, 0x18	; 24
 368:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */
 36a:	20 b5       	in	r18, 0x20	; 32
 36c:	26 68       	ori	r18, 0x86	; 134
 36e:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
 370:	dc 01       	movw	r26, r24
 372:	cb 01       	movw	r24, r22
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	aa 1f       	adc	r26, r26
 37a:	bb 1f       	adc	r27, r27
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	aa 1f       	adc	r26, r26
 382:	bb 1f       	adc	r27, r27
 384:	9c 01       	movw	r18, r24
 386:	ad 01       	movw	r20, r26
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	44 1f       	adc	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	22 0f       	add	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	44 1f       	adc	r20, r20
 396:	55 1f       	adc	r21, r21
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	74 e2       	ldi	r23, 0x24	; 36
 39c:	84 ef       	ldi	r24, 0xF4	; 244
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__udivmodsi4>
 3a4:	8f ef       	ldi	r24, 0xFF	; 255
 3a6:	82 0f       	add	r24, r18
 3a8:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
 3aa:	da 01       	movw	r26, r20
 3ac:	c9 01       	movw	r24, r18
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	a1 09       	sbc	r26, r1
 3b2:	b1 09       	sbc	r27, r1
 3b4:	89 2f       	mov	r24, r25
 3b6:	9a 2f       	mov	r25, r26
 3b8:	ab 2f       	mov	r26, r27
 3ba:	bb 27       	eor	r27, r27
 3bc:	80 bd       	out	0x20, r24	; 32
 3be:	08 95       	ret

000003c0 <USART_RxFloat>:
}

char USART_RxFloat()									/* Data receiving function */
{
	while( (UCSRA & (1 << RXC)) == 0 );
 3c0:	5f 9b       	sbis	0x0b, 7	; 11
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <USART_RxFloat>
	return(UDR);									/* Get and return received data */
 3c4:	8c b1       	in	r24, 0x0c	; 12
}
 3c6:	08 95       	ret

000003c8 <__udivmodsi4>:
 3c8:	a1 e2       	ldi	r26, 0x21	; 33
 3ca:	1a 2e       	mov	r1, r26
 3cc:	aa 1b       	sub	r26, r26
 3ce:	bb 1b       	sub	r27, r27
 3d0:	fd 01       	movw	r30, r26
 3d2:	0d c0       	rjmp	.+26     	; 0x3ee <__udivmodsi4_ep>

000003d4 <__udivmodsi4_loop>:
 3d4:	aa 1f       	adc	r26, r26
 3d6:	bb 1f       	adc	r27, r27
 3d8:	ee 1f       	adc	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	a2 17       	cp	r26, r18
 3de:	b3 07       	cpc	r27, r19
 3e0:	e4 07       	cpc	r30, r20
 3e2:	f5 07       	cpc	r31, r21
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <__udivmodsi4_ep>
 3e6:	a2 1b       	sub	r26, r18
 3e8:	b3 0b       	sbc	r27, r19
 3ea:	e4 0b       	sbc	r30, r20
 3ec:	f5 0b       	sbc	r31, r21

000003ee <__udivmodsi4_ep>:
 3ee:	66 1f       	adc	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	88 1f       	adc	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	1a 94       	dec	r1
 3f8:	69 f7       	brne	.-38     	; 0x3d4 <__udivmodsi4_loop>
 3fa:	60 95       	com	r22
 3fc:	70 95       	com	r23
 3fe:	80 95       	com	r24
 400:	90 95       	com	r25
 402:	9b 01       	movw	r18, r22
 404:	ac 01       	movw	r20, r24
 406:	bd 01       	movw	r22, r26
 408:	cf 01       	movw	r24, r30
 40a:	08 95       	ret

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
