
Heart beat sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000030e  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000951  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068d  00000000  00000000  00000da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042f  00000000  00000000  00001436  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001868  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039a  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b4  00000000  00000000  00001c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000203e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  7a:	0c 94 85 01 	jmp	0x30a	; 0x30a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcdcmd>:

#include<avr/io.h>
#include<util/delay.h>

void lcdcmd(unsigned char cmd){
	PORTB &=~(1<<RS);
  82:	98 b3       	in	r25, 0x18	; 24
  84:	9e 7f       	andi	r25, 0xFE	; 254
  86:	98 bb       	out	0x18, r25	; 24
	PORTB &=~(1<<RW);
  88:	98 b3       	in	r25, 0x18	; 24
  8a:	9d 7f       	andi	r25, 0xFD	; 253
  8c:	98 bb       	out	0x18, r25	; 24
	LCD= cmd & 0xF0;
  8e:	98 2f       	mov	r25, r24
  90:	90 7f       	andi	r25, 0xF0	; 240
  92:	95 bb       	out	0x15, r25	; 21
	PORTC|=(1<<EN);
  94:	95 b3       	in	r25, 0x15	; 21
  96:	92 60       	ori	r25, 0x02	; 2
  98:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	ef e9       	ldi	r30, 0x9F	; 159
  9c:	ff e0       	ldi	r31, 0x0F	; 15
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcdcmd+0x1c>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcdcmd+0x22>
  a4:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<EN);
  a6:	95 b3       	in	r25, 0x15	; 21
  a8:	9d 7f       	andi	r25, 0xFD	; 253
  aa:	95 bb       	out	0x15, r25	; 21

	LCD = cmd<<4;
  ac:	82 95       	swap	r24
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	85 bb       	out	0x15, r24	; 21
	PORTC |=(1<<EN);
  b2:	85 b3       	in	r24, 0x15	; 21
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	85 bb       	out	0x15, r24	; 21
  b8:	8f e9       	ldi	r24, 0x9F	; 159
  ba:	9f e0       	ldi	r25, 0x0F	; 15
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcdcmd+0x3a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcdcmd+0x40>
  c2:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<EN);
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	08 95       	ret

000000cc <lcddata>:
}


void lcddata(unsigned char data){
	
	PORTB |= (1<<RS);
  cc:	98 b3       	in	r25, 0x18	; 24
  ce:	91 60       	ori	r25, 0x01	; 1
  d0:	98 bb       	out	0x18, r25	; 24
	PORTB &= ~(1<<RW);
  d2:	98 b3       	in	r25, 0x18	; 24
  d4:	9d 7f       	andi	r25, 0xFD	; 253
  d6:	98 bb       	out	0x18, r25	; 24
	LCD= data & 0xF0;
  d8:	98 2f       	mov	r25, r24
  da:	90 7f       	andi	r25, 0xF0	; 240
  dc:	95 bb       	out	0x15, r25	; 21
	PORTC|= (1<<EN);
  de:	95 b3       	in	r25, 0x15	; 21
  e0:	92 60       	ori	r25, 0x02	; 2
  e2:	95 bb       	out	0x15, r25	; 21
  e4:	ef e1       	ldi	r30, 0x1F	; 31
  e6:	fe e4       	ldi	r31, 0x4E	; 78
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcddata+0x1c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcddata+0x22>
  ee:	00 00       	nop
	_delay_ms(5);
	PORTC &= ~(1<<EN);
  f0:	95 b3       	in	r25, 0x15	; 21
  f2:	9d 7f       	andi	r25, 0xFD	; 253
  f4:	95 bb       	out	0x15, r25	; 21

	LCD = data<<4;
  f6:	82 95       	swap	r24
  f8:	80 7f       	andi	r24, 0xF0	; 240
  fa:	85 bb       	out	0x15, r24	; 21
	PORTC |=(1<<EN);
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	85 bb       	out	0x15, r24	; 21
 102:	8f e1       	ldi	r24, 0x1F	; 31
 104:	9e e4       	ldi	r25, 0x4E	; 78
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcddata+0x3a>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcddata+0x40>
 10c:	00 00       	nop
	_delay_ms(5);
	PORTC &= ~(1<<EN);
 10e:	85 b3       	in	r24, 0x15	; 21
 110:	8d 7f       	andi	r24, 0xFD	; 253
 112:	85 bb       	out	0x15, r24	; 21
 114:	08 95       	ret

00000116 <lcd_Print>:
	
}

void lcd_Print(const char*str){
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)
 120:	c0 e0       	ldi	r28, 0x00	; 0
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	03 c0       	rjmp	.+6      	; 0x12c <lcd_Print+0x16>
	{
		lcddata(str[i]);
 126:	0e 94 66 00 	call	0xcc	; 0xcc <lcddata>
	
}

void lcd_Print(const char*str){
	int i;
	for(i=0;str[i]!=0;i++)
 12a:	21 96       	adiw	r28, 0x01	; 1
 12c:	f8 01       	movw	r30, r16
 12e:	ec 0f       	add	r30, r28
 130:	fd 1f       	adc	r31, r29
 132:	80 81       	ld	r24, Z
 134:	81 11       	cpse	r24, r1
 136:	f7 cf       	rjmp	.-18     	; 0x126 <lcd_Print+0x10>
	{
		lcddata(str[i]);
	}
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <lcd_init>:

void lcd_init(){
	DDRC= 0xFF;
 142:	9f ef       	ldi	r25, 0xFF	; 255
 144:	94 bb       	out	0x14, r25	; 20
	DDRC |=(1<<EN);
 146:	84 b3       	in	r24, 0x14	; 20
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF;
 14c:	97 bb       	out	0x17, r25	; 23
	PORTC&= ~(1<<EN);
 14e:	85 b3       	in	r24, 0x15	; 21
 150:	8d 7f       	andi	r24, 0xFD	; 253
 152:	85 bb       	out	0x15, r24	; 21
	lcdcmd(0x33);
 154:	83 e3       	ldi	r24, 0x33	; 51
 156:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdcmd(0x32);
 15a:	82 e3       	ldi	r24, 0x32	; 50
 15c:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdcmd(0x28);
 160:	88 e2       	ldi	r24, 0x28	; 40
 162:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdcmd(0x0C);
 166:	8c e0       	ldi	r24, 0x0C	; 12
 168:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcd_Print("CALCULATING  ");
 16c:	80 e6       	ldi	r24, 0x60	; 96
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_Print>
	lcdcmd(0xC0);
 174:	80 ec       	ldi	r24, 0xC0	; 192
 176:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
 17a:	08 95       	ret

0000017c <main>:
}



int main(void)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	60 97       	sbiw	r28, 0x10	; 16
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
	
	DDRD = DDRD & ~(1<<7); // Heart Sensor
 190:	81 b3       	in	r24, 0x11	; 17
 192:	8f 77       	andi	r24, 0x7F	; 127
 194:	81 bb       	out	0x11, r24	; 17
	DDRD = DDRD & ~(1<<6); // External Clock
 196:	81 b3       	in	r24, 0x11	; 17
 198:	8f 7b       	andi	r24, 0xBF	; 191
 19a:	81 bb       	out	0x11, r24	; 17

	DDRD = 0x01; // Beat LED
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	81 bb       	out	0x11, r24	; 17
	
	int last =0; // Saves last BPM.
	int j = 0; // How many seconds elapsed.

	
	lcd_init();
 1a0:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_init>
	
	int once = 0;
	int once2 = 0;
	
	int last =0; // Saves last BPM.
	int j = 0; // How many seconds elapsed.
 1a4:	c1 2c       	mov	r12, r1
 1a6:	d1 2c       	mov	r13, r1

	
	int once = 0;
	int once2 = 0;
	
	int last =0; // Saves last BPM.
 1a8:	00 e0       	ldi	r16, 0x00	; 0
 1aa:	10 e0       	ldi	r17, 0x00	; 0
	
	int i = 0; // I Saves heart beat rate.

	
	int once = 0;
	int once2 = 0;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
	DDRD = 0x01; // Beat LED
	
	int i = 0; // I Saves heart beat rate.

	
	int once = 0;
 1b0:	e1 2c       	mov	r14, r1
 1b2:	f1 2c       	mov	r15, r1
	DDRD = DDRD & ~(1<<7); // Heart Sensor
	DDRD = DDRD & ~(1<<6); // External Clock

	DDRD = 0x01; // Beat LED
	
	int i = 0; // I Saves heart beat rate.
 1b4:	a1 2c       	mov	r10, r1
 1b6:	b1 2c       	mov	r11, r1
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <main+0x42>
				once2 = 1;
			}
			
		}
		else {
			once2 = 0;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
	
	lcd_init();
	
	while(1)
	{
		if(PIND & (1<<7)){
 1be:	87 9b       	sbis	0x10, 7	; 16
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <main+0x5e>
			
			if(once==0){
 1c2:	e1 14       	cp	r14, r1
 1c4:	f1 04       	cpc	r15, r1
 1c6:	61 f4       	brne	.+24     	; 0x1e0 <main+0x64>
				PORTD = 0x01; //LED ON
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	22 bb       	out	0x12, r18	; 18
				i++;
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	a2 1a       	sub	r10, r18
 1d0:	b2 0a       	sbc	r11, r18
				once = 1;
 1d2:	ee 24       	eor	r14, r14
 1d4:	e3 94       	inc	r14
 1d6:	f1 2c       	mov	r15, r1
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <main+0x64>
			}
			
		}
		else {
			PORTD = 0x00; //LED OFF
 1da:	12 ba       	out	0x12, r1	; 18
			once = 0;
 1dc:	e1 2c       	mov	r14, r1
 1de:	f1 2c       	mov	r15, r1
		}
		
		
		
		if(PIND & (1<<6)){
 1e0:	86 9b       	sbis	0x10, 6	; 16
 1e2:	eb cf       	rjmp	.-42     	; 0x1ba <main+0x3e>
			
			if(once2==0){
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	59 f7       	brne	.-42     	; 0x1be <main+0x42>
				
				j++;
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	c8 1a       	sub	r12, r24
 1ec:	d8 0a       	sbc	r13, r24
				
				if(j >= 10){
 1ee:	2a e0       	ldi	r18, 0x0A	; 10
 1f0:	c2 16       	cp	r12, r18
 1f2:	d1 04       	cpc	r13, r1
 1f4:	0c f4       	brge	.+2      	; 0x1f8 <main+0x7c>
 1f6:	42 c0       	rjmp	.+132    	; 0x27c <main+0x100>
					
					int BPM;
					
					if(last==0){
 1f8:	01 15       	cp	r16, r1
 1fa:	11 05       	cpc	r17, r1
 1fc:	41 f4       	brne	.+16     	; 0x20e <main+0x92>
						BPM = i*6;
 1fe:	85 01       	movw	r16, r10
 200:	00 0f       	add	r16, r16
 202:	11 1f       	adc	r17, r17
 204:	0a 0d       	add	r16, r10
 206:	1b 1d       	adc	r17, r11
 208:	00 0f       	add	r16, r16
 20a:	11 1f       	adc	r17, r17
 20c:	0f c0       	rjmp	.+30     	; 0x22c <main+0xb0>
						last = BPM;
						}else{
						BPM = ((i*6)+last)/2;
 20e:	c5 01       	movw	r24, r10
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	8a 0d       	add	r24, r10
 216:	9b 1d       	adc	r25, r11
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	08 0f       	add	r16, r24
 21e:	19 1f       	adc	r17, r25
 220:	11 23       	and	r17, r17
 222:	14 f4       	brge	.+4      	; 0x228 <main+0xac>
 224:	0f 5f       	subi	r16, 0xFF	; 255
 226:	1f 4f       	sbci	r17, 0xFF	; 255
 228:	15 95       	asr	r17
 22a:	07 95       	ror	r16
						last = BPM;
					}
					
					char str[16];
					itoa(BPM, str, 10);
 22c:	4a e0       	ldi	r20, 0x0A	; 10
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	be 01       	movw	r22, r28
 232:	6f 5f       	subi	r22, 0xFF	; 255
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	c8 01       	movw	r24, r16
 238:	0e 94 45 01 	call	0x28a	; 0x28a <itoa>
					
					
					lcdcmd(0x01);
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
					
					if(BPM > 10){
 242:	0b 30       	cpi	r16, 0x0B	; 11
 244:	11 05       	cpc	r17, r1
 246:	64 f0       	brlt	.+24     	; 0x260 <main+0xe4>
						lcd_Print("AVG BPM : ");
 248:	8e e6       	ldi	r24, 0x6E	; 110
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_Print>
						lcd_Print(str);
 250:	ce 01       	movw	r24, r28
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_Print>
						lcdcmd(0xC0);
 258:	80 ec       	ldi	r24, 0xC0	; 192
 25a:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
 25e:	07 c0       	rjmp	.+14     	; 0x26e <main+0xf2>
						}else{
						lcd_Print("NOT DETECTED!");
 260:	89 e7       	ldi	r24, 0x79	; 121
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_Print>
						lcdcmd(0xC0);
 268:	80 ec       	ldi	r24, 0xC0	; 192
 26a:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
					}
					
					
					i=0;
					j=0;
 26e:	c1 2c       	mov	r12, r1
 270:	d1 2c       	mov	r13, r1
					
					
					}else{
					lcd_Print(".");
				}
				once2 = 1;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
						lcd_Print("NOT DETECTED!");
						lcdcmd(0xC0);
					}
					
					
					i=0;
 276:	a1 2c       	mov	r10, r1
 278:	b1 2c       	mov	r11, r1
 27a:	a1 cf       	rjmp	.-190    	; 0x1be <main+0x42>
					j=0;
					
					
					}else{
					lcd_Print(".");
 27c:	87 e8       	ldi	r24, 0x87	; 135
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_Print>
				}
				once2 = 1;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	9a cf       	rjmp	.-204    	; 0x1be <main+0x42>

0000028a <itoa>:
 28a:	45 32       	cpi	r20, 0x25	; 37
 28c:	51 05       	cpc	r21, r1
 28e:	20 f4       	brcc	.+8      	; 0x298 <itoa+0xe>
 290:	42 30       	cpi	r20, 0x02	; 2
 292:	10 f0       	brcs	.+4      	; 0x298 <itoa+0xe>
 294:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__itoa_ncheck>
 298:	fb 01       	movw	r30, r22
 29a:	10 82       	st	Z, r1
 29c:	cb 01       	movw	r24, r22
 29e:	08 95       	ret

000002a0 <__itoa_ncheck>:
 2a0:	bb 27       	eor	r27, r27
 2a2:	4a 30       	cpi	r20, 0x0A	; 10
 2a4:	31 f4       	brne	.+12     	; 0x2b2 <__itoa_ncheck+0x12>
 2a6:	99 23       	and	r25, r25
 2a8:	22 f4       	brpl	.+8      	; 0x2b2 <__itoa_ncheck+0x12>
 2aa:	bd e2       	ldi	r27, 0x2D	; 45
 2ac:	90 95       	com	r25
 2ae:	81 95       	neg	r24
 2b0:	9f 4f       	sbci	r25, 0xFF	; 255
 2b2:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__utoa_common>

000002b6 <__utoa_ncheck>:
 2b6:	bb 27       	eor	r27, r27

000002b8 <__utoa_common>:
 2b8:	fb 01       	movw	r30, r22
 2ba:	55 27       	eor	r21, r21
 2bc:	aa 27       	eor	r26, r26
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	aa 1f       	adc	r26, r26
 2c4:	a4 17       	cp	r26, r20
 2c6:	10 f0       	brcs	.+4      	; 0x2cc <__utoa_common+0x14>
 2c8:	a4 1b       	sub	r26, r20
 2ca:	83 95       	inc	r24
 2cc:	50 51       	subi	r21, 0x10	; 16
 2ce:	b9 f7       	brne	.-18     	; 0x2be <__utoa_common+0x6>
 2d0:	a0 5d       	subi	r26, 0xD0	; 208
 2d2:	aa 33       	cpi	r26, 0x3A	; 58
 2d4:	08 f0       	brcs	.+2      	; 0x2d8 <__utoa_common+0x20>
 2d6:	a9 5d       	subi	r26, 0xD9	; 217
 2d8:	a1 93       	st	Z+, r26
 2da:	00 97       	sbiw	r24, 0x00	; 0
 2dc:	79 f7       	brne	.-34     	; 0x2bc <__utoa_common+0x4>
 2de:	b1 11       	cpse	r27, r1
 2e0:	b1 93       	st	Z+, r27
 2e2:	11 92       	st	Z+, r1
 2e4:	cb 01       	movw	r24, r22
 2e6:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <strrev>

000002ea <strrev>:
 2ea:	dc 01       	movw	r26, r24
 2ec:	fc 01       	movw	r30, r24
 2ee:	67 2f       	mov	r22, r23
 2f0:	71 91       	ld	r23, Z+
 2f2:	77 23       	and	r23, r23
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <strrev+0x4>
 2f6:	32 97       	sbiw	r30, 0x02	; 2
 2f8:	04 c0       	rjmp	.+8      	; 0x302 <strrev+0x18>
 2fa:	7c 91       	ld	r23, X
 2fc:	6d 93       	st	X+, r22
 2fe:	70 83       	st	Z, r23
 300:	62 91       	ld	r22, -Z
 302:	ae 17       	cp	r26, r30
 304:	bf 07       	cpc	r27, r31
 306:	c8 f3       	brcs	.-14     	; 0x2fa <strrev+0x10>
 308:	08 95       	ret

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
