
CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005f5  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000574  00000000  00000000  000008e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000235  00000000  00000000  00000e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000306  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000002e  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  74:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <piezo_init>:
#include <avr/io.h>
static volatile float piezoValue;
void piezo_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	87 b9       	out	0x07, r24	; 7

	// ADC Enable and prescaler of 64
	// 8000000/64 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  80:	87 e8       	ldi	r24, 0x87	; 135
  82:	86 b9       	out	0x06, r24	; 6
  84:	08 95       	ret

00000086 <piezo_read>:
}

uint16_t piezo_read(unsigned char ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
  86:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;
  88:	97 b1       	in	r25, 0x07	; 7
  8a:	89 2b       	or	r24, r25
  8c:	87 b9       	out	0x07, r24	; 7

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	80 64       	ori	r24, 0x40	; 64
  92:	86 b9       	out	0x06, r24	; 6

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  94:	34 9b       	sbis	0x06, 4	; 6
  96:	fe cf       	rjmp	.-4      	; 0x94 <piezo_read+0xe>
	//Clear ADIF by writing one to it
	//Note you may be wondering why we have write one to clear it
	//This is standard way of clearing bits in io as said in datasheets.
	//The code writes '1' but it result in setting bit to '0' !!!

	ADCSRA|=(1<<ADIF);
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	86 b9       	out	0x06, r24	; 6

	return(ADC);
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	95 b1       	in	r25, 0x05	; 5
}
  a2:	08 95       	ret

000000a4 <main>:

int main(void)
{
	DDRA|=(1<<PA1);
  a4:	8a b3       	in	r24, 0x1a	; 26
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	8a bb       	out	0x1a, r24	; 26
	piezo_init();
  aa:	0e 94 3e 00 	call	0x7c	; 0x7c <piezo_init>
	piezoValue;
  ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b6:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  ba:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	/* Replace with your application code */
	while (1)
	{
		piezoValue = piezo_read(0);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 43 00 	call	0x86	; 0x86 <piezo_read>
  c4:	bc 01       	movw	r22, r24
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 86 00 	call	0x10c	; 0x10c <__floatunsisf>
  ce:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  da:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		if (piezoValue>0)
  de:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e2:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  ea:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	a9 01       	movw	r20, r18
  f4:	0e 94 c3 00 	call	0x186	; 0x186 <__gesf2>
  f8:	18 16       	cp	r1, r24
  fa:	24 f4       	brge	.+8      	; 0x104 <main+0x60>
		{
			PORTA|=(1<<PA1);
  fc:	8b b3       	in	r24, 0x1b	; 27
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	8b bb       	out	0x1b, r24	; 27
 102:	dd cf       	rjmp	.-70     	; 0xbe <main+0x1a>
			}else{
			PORTA&=~(1<<PA1);
 104:	8b b3       	in	r24, 0x1b	; 27
 106:	8d 7f       	andi	r24, 0xFD	; 253
 108:	8b bb       	out	0x1b, r24	; 27
 10a:	d9 cf       	rjmp	.-78     	; 0xbe <main+0x1a>

0000010c <__floatunsisf>:
 10c:	e8 94       	clt
 10e:	09 c0       	rjmp	.+18     	; 0x122 <__floatsisf+0x12>

00000110 <__floatsisf>:
 110:	97 fb       	bst	r25, 7
 112:	3e f4       	brtc	.+14     	; 0x122 <__floatsisf+0x12>
 114:	90 95       	com	r25
 116:	80 95       	com	r24
 118:	70 95       	com	r23
 11a:	61 95       	neg	r22
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
 11e:	8f 4f       	sbci	r24, 0xFF	; 255
 120:	9f 4f       	sbci	r25, 0xFF	; 255
 122:	99 23       	and	r25, r25
 124:	a9 f0       	breq	.+42     	; 0x150 <__floatsisf+0x40>
 126:	f9 2f       	mov	r31, r25
 128:	96 e9       	ldi	r25, 0x96	; 150
 12a:	bb 27       	eor	r27, r27
 12c:	93 95       	inc	r25
 12e:	f6 95       	lsr	r31
 130:	87 95       	ror	r24
 132:	77 95       	ror	r23
 134:	67 95       	ror	r22
 136:	b7 95       	ror	r27
 138:	f1 11       	cpse	r31, r1
 13a:	f8 cf       	rjmp	.-16     	; 0x12c <__floatsisf+0x1c>
 13c:	fa f4       	brpl	.+62     	; 0x17c <__floatsisf+0x6c>
 13e:	bb 0f       	add	r27, r27
 140:	11 f4       	brne	.+4      	; 0x146 <__floatsisf+0x36>
 142:	60 ff       	sbrs	r22, 0
 144:	1b c0       	rjmp	.+54     	; 0x17c <__floatsisf+0x6c>
 146:	6f 5f       	subi	r22, 0xFF	; 255
 148:	7f 4f       	sbci	r23, 0xFF	; 255
 14a:	8f 4f       	sbci	r24, 0xFF	; 255
 14c:	9f 4f       	sbci	r25, 0xFF	; 255
 14e:	16 c0       	rjmp	.+44     	; 0x17c <__floatsisf+0x6c>
 150:	88 23       	and	r24, r24
 152:	11 f0       	breq	.+4      	; 0x158 <__floatsisf+0x48>
 154:	96 e9       	ldi	r25, 0x96	; 150
 156:	11 c0       	rjmp	.+34     	; 0x17a <__floatsisf+0x6a>
 158:	77 23       	and	r23, r23
 15a:	21 f0       	breq	.+8      	; 0x164 <__floatsisf+0x54>
 15c:	9e e8       	ldi	r25, 0x8E	; 142
 15e:	87 2f       	mov	r24, r23
 160:	76 2f       	mov	r23, r22
 162:	05 c0       	rjmp	.+10     	; 0x16e <__floatsisf+0x5e>
 164:	66 23       	and	r22, r22
 166:	71 f0       	breq	.+28     	; 0x184 <__floatsisf+0x74>
 168:	96 e8       	ldi	r25, 0x86	; 134
 16a:	86 2f       	mov	r24, r22
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	2a f0       	brmi	.+10     	; 0x17c <__floatsisf+0x6c>
 172:	9a 95       	dec	r25
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	88 1f       	adc	r24, r24
 17a:	da f7       	brpl	.-10     	; 0x172 <__floatsisf+0x62>
 17c:	88 0f       	add	r24, r24
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	97 f9       	bld	r25, 7
 184:	08 95       	ret

00000186 <__gesf2>:
 186:	0e 94 c8 00 	call	0x190	; 0x190 <__fp_cmp>
 18a:	08 f4       	brcc	.+2      	; 0x18e <__gesf2+0x8>
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	08 95       	ret

00000190 <__fp_cmp>:
 190:	99 0f       	add	r25, r25
 192:	00 08       	sbc	r0, r0
 194:	55 0f       	add	r21, r21
 196:	aa 0b       	sbc	r26, r26
 198:	e0 e8       	ldi	r30, 0x80	; 128
 19a:	fe ef       	ldi	r31, 0xFE	; 254
 19c:	16 16       	cp	r1, r22
 19e:	17 06       	cpc	r1, r23
 1a0:	e8 07       	cpc	r30, r24
 1a2:	f9 07       	cpc	r31, r25
 1a4:	c0 f0       	brcs	.+48     	; 0x1d6 <__fp_cmp+0x46>
 1a6:	12 16       	cp	r1, r18
 1a8:	13 06       	cpc	r1, r19
 1aa:	e4 07       	cpc	r30, r20
 1ac:	f5 07       	cpc	r31, r21
 1ae:	98 f0       	brcs	.+38     	; 0x1d6 <__fp_cmp+0x46>
 1b0:	62 1b       	sub	r22, r18
 1b2:	73 0b       	sbc	r23, r19
 1b4:	84 0b       	sbc	r24, r20
 1b6:	95 0b       	sbc	r25, r21
 1b8:	39 f4       	brne	.+14     	; 0x1c8 <__fp_cmp+0x38>
 1ba:	0a 26       	eor	r0, r26
 1bc:	61 f0       	breq	.+24     	; 0x1d6 <__fp_cmp+0x46>
 1be:	23 2b       	or	r18, r19
 1c0:	24 2b       	or	r18, r20
 1c2:	25 2b       	or	r18, r21
 1c4:	21 f4       	brne	.+8      	; 0x1ce <__fp_cmp+0x3e>
 1c6:	08 95       	ret
 1c8:	0a 26       	eor	r0, r26
 1ca:	09 f4       	brne	.+2      	; 0x1ce <__fp_cmp+0x3e>
 1cc:	a1 40       	sbci	r26, 0x01	; 1
 1ce:	a6 95       	lsr	r26
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	81 1d       	adc	r24, r1
 1d4:	81 1d       	adc	r24, r1
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
