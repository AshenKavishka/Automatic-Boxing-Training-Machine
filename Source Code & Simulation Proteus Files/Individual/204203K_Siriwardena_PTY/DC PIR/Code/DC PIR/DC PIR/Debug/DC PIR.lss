
DC PIR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056d  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f7  00000000  00000000  000006f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000207  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c3  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>

int main()
{
	
	DDRA &= ~(1<<PA0);
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	8a bb       	out	0x1a, r24	; 26
	DDRA &= ~(1<<PA1);
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	8d 7f       	andi	r24, 0xFD	; 253
  76:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xF8;
  78:	88 ef       	ldi	r24, 0xF8	; 248
  7a:	81 bb       	out	0x11, r24	; 17
	
	TCCR2 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS00);
  7c:	89 e6       	ldi	r24, 0x69	; 105
  7e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 255;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	83 bd       	out	0x23, r24	; 35

	while (1)
	{
		if (PINA &(1<<PA0))
  84:	c8 9b       	sbis	0x19, 0	; 25
  86:	06 c0       	rjmp	.+12     	; 0x94 <main+0x28>
		{
			PORTD = 0x28;
  88:	88 e2       	ldi	r24, 0x28	; 40
  8a:	82 bb       	out	0x12, r24	; 18
			while(PINA &(1<<PA0));
  8c:	c8 99       	sbic	0x19, 0	; 25
  8e:	fe cf       	rjmp	.-4      	; 0x8c <main+0x20>
			PORTD = 0x00;
  90:	12 ba       	out	0x12, r1	; 18
  92:	f8 cf       	rjmp	.-16     	; 0x84 <main+0x18>
			
			
		}else if(PINA &(1<<PA1))
  94:	c9 9b       	sbis	0x19, 1	; 25
  96:	f6 cf       	rjmp	.-20     	; 0x84 <main+0x18>
		{
			PORTD = 0x50;
  98:	80 e5       	ldi	r24, 0x50	; 80
  9a:	82 bb       	out	0x12, r24	; 18
			while(PINA &(1<<PA1));
  9c:	c9 99       	sbic	0x19, 1	; 25
  9e:	fe cf       	rjmp	.-4      	; 0x9c <main+0x30>
			PORTD = 0x00;
  a0:	12 ba       	out	0x12, r1	; 18
  a2:	f0 cf       	rjmp	.-32     	; 0x84 <main+0x18>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
